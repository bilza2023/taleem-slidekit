var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// node_modules/taleem-video-deckbuilder/src/toolkit/designMeta.js
var designWidth = 1020;
var designHeight = 576;

// node_modules/taleem-video-deckbuilder/src/deckBuilder/slide.js
var Slide = class {
  constructor(startTime, endTime) {
    this.startTime = startTime;
    this.endTime = endTime;
    this.items = [];
  }
  addItem(item) {
    if (typeof item.showAt !== "number") {
      throw new Error("Missing showAt in item");
    }
    if (item.showAt > this.endTime) {
      throw new Error(`Item showAt=${item.showAt} is beyond slide endTime=${this.endTime}`);
    }
    this.items.push(item);
  }
  addItems(...items) {
    for (const item of items) {
      this.addItem(item);
    }
  }
  toJSON() {
    return {
      startTime: this.startTime,
      endTime: this.endTime,
      background: this.background || null,
      items: this.items
    };
  }
};

// node_modules/taleem-video-deckbuilder/src/deckBuilder/backgroundUtils.js
function cloneBackground(baseBackground, override = {}) {
  const cloned = typeof structuredClone === "function" ? structuredClone(baseBackground) : JSON.parse(JSON.stringify(baseBackground));
  return { ...cloned, ...override };
}

// node_modules/taleem-video-deckbuilder/src/deckBuilder/deckBuilder.js
var DeckBuilder = class {
  constructor() {
    this.slides = [];
    this.currentStart = 0;
    this.designWidth = designWidth;
    this.designHeight = designHeight;
    this.globalBackground = null;
    this.minDuration = 2;
    this.totalDuration = 0;
  }
  setGlobalBackgroundImage(backgroundImage, backgroundImageOpacity = 1) {
    if (!this.globalBackground) {
      throw new Error("Call setGlobalBackground() first.");
    }
    this.globalBackground.backgroundImage = backgroundImage;
    this.globalBackground.backgroundImageOpacity = backgroundImageOpacity;
  }
  setDesignWidth(w) {
    this.designWidth = w;
  }
  setDesignHeight(h) {
    this.designHeight = h;
  }
  setGlobalBackground(bg) {
    this.globalBackground = bg;
  }
  // addSlide(endTime) {
  //   const startTime = this.slides.length > 0 
  //     ? this.slides[this.slides.length - 1].endTime 
  //     : 0;
  //   const slide = new Slide(startTime, endTime);
  //   this.slides.push(slide);
  //   this.totalDuration = Math.max(this.totalDuration, endTime);
  //   return slide;
  // }
  addSlide(endTime) {
    if (!this.globalBackground) {
      throw new Error("DeckBuilder: global background not set");
    }
    const startTime = this.slides.length > 0 ? this.slides[this.slides.length - 1].endTime : 0;
    const background = cloneBackground(this.globalBackground);
    const slide = new Slide(startTime, endTime);
    slide.background = background;
    this.slides.push(slide);
    this.totalDuration = Math.max(this.totalDuration, endTime);
    return slide;
  }
  build() {
    return {
      designWidth,
      designHeight,
      totalDuration: this.totalDuration,
      slidesData: this.slides.map((slide) => slide.toJSON())
    };
  }
};

// node_modules/taleem-video-deckbuilder/src/items/defaultItems.js
var defaultItems_exports = {};
__export(defaultItems_exports, {
  createArcItem: () => createArcItem,
  createCircleItem: () => createCircleItem,
  createIconItem: () => createIconItem,
  createImageItem: () => createImageItem,
  createRectItem: () => createRectItem,
  createRichTextItem: () => createRichTextItem,
  createTableItem: () => createTableItem,
  createTextItem: () => createTextItem,
  createTriangleItem: () => createTriangleItem
});
var defaultShowAt = 0;
function createTextItem(props = {}) {
  return {
    type: "text",
    text: "Default Text",
    x: 0,
    y: 0,
    width: 1020,
    fontSize: 36,
    fontFamily: "Arial",
    color: 0,
    textAlign: "left",
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createIconItem(props = {}) {
  return {
    type: "icon",
    iconName: "BULB",
    x: 0,
    y: 0,
    width: 100,
    color: 16777215,
    fontFamily: "Arial",
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createRectItem(props = {}) {
  return {
    type: "rect",
    x: 0,
    y: 0,
    width: 200,
    height: 100,
    color: 52479,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createCircleItem(props = {}) {
  return {
    type: "circle",
    x: 0,
    y: 0,
    radius: 50,
    color: 16737894,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createTriangleItem(props = {}) {
  return {
    type: "triangle",
    x: 0,
    y: 0,
    size: 100,
    color: 6750054,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createImageItem(props = {}) {
  return {
    type: "image",
    src: "book",
    x: 0,
    y: 0,
    width: 100,
    height: 100,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createRichTextItem(props = {}) {
  return {
    type: "richText",
    text: "Default rich text",
    x: 0,
    y: 0,
    width: 800,
    height: 200,
    fontSize: 36,
    fontFamily: "Georgia",
    color: 0,
    textAlign: "left",
    lineHeight: 1.5,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createTableItem(props = {}) {
  return {
    type: "table",
    x: 0,
    y: 0,
    width: 800,
    height: 400,
    rows: [],
    fontSize: 28,
    fontFamily: "Arial",
    textColor: "#ffffff",
    borderColor: "#333333",
    borderWidth: 2,
    padding: 10,
    rowHeight: 50,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}
function createArcItem(props = {}) {
  return {
    type: "arc",
    x: 0,
    y: 0,
    radius: 100,
    innerRadius: 0,
    startAngle: 0,
    endAngle: Math.PI * 2,
    color: 65280,
    rotation: 0,
    visible: true,
    showAt: defaultShowAt,
    ...props
  };
}

// node_modules/taleem-video-deckbuilder/src/theme/globalThemes.js
var globalThemes_exports = {};
__export(globalThemes_exports, {
  darkTheme: () => darkTheme,
  highContrast: () => highContrast,
  neonDark: () => neonDark,
  pastel: () => pastel,
  royalBlue: () => royalBlue
});
var darkTheme = {
  "backgroundColor": "#1a1a1a",
  "baseTextColor": "#eeeeee",
  "headingColor": "#ffffff",
  "bulletColor": "#bbbbbb",
  "primaryColor": "#00ffaa",
  "secondaryColor": "#ffaa00",
  "borderColor": "#444444",
  "shadowColor": "rgba(0, 0, 0, 0.4)",
  "fontFamilyHeading": "Georgia",
  "fontFamilyBase": "Arial"
};
var highContrast = {
  "backgroundColor": "#ffffff",
  "baseTextColor": "#000000",
  "headingColor": "#000000",
  "bulletColor": "#222222",
  "primaryColor": "#ff0000",
  "secondaryColor": "#0000ff",
  "borderColor": "#000000",
  "shadowColor": "rgba(0, 0, 0, 0.1)",
  "fontFamilyHeading": "Arial Black",
  "fontFamilyBase": "Tahoma"
};
var pastel = {
  backgroundColor: "#fdf6f0",
  baseTextColor: "#3d3d3d",
  headingColor: "#d67291",
  bulletColor: "#7f8c8d",
  primaryColor: "#a29bfe",
  secondaryColor: "#fab1a0",
  borderColor: "#dcdde1",
  shadowColor: "rgba(100, 100, 100, 0.1)",
  fontFamilyHeading: "Comic Sans MS",
  fontFamilyBase: "Verdana"
};
var royalBlue = {
  backgroundColor: "#001f3f",
  baseTextColor: "#dfe6e9",
  headingColor: "#74b9ff",
  bulletColor: "#81ecec",
  primaryColor: "#00cec9",
  secondaryColor: "#0984e3",
  borderColor: "#003366",
  shadowColor: "rgba(0, 0, 50, 0.3)",
  fontFamilyHeading: "Palatino Linotype",
  fontFamilyBase: "Helvetica"
};
var neonDark = {
  backgroundColor: "#0a0a0a",
  baseTextColor: "#39ff14",
  headingColor: "#f81ce5",
  bulletColor: "#00ffff",
  primaryColor: "#ff0090",
  secondaryColor: "#00ffcc",
  borderColor: "#222222",
  shadowColor: "rgba(255, 255, 255, 0.1)",
  fontFamilyHeading: "Courier New",
  fontFamilyBase: "Lucida Console"
};

// node_modules/taleem-video-deckbuilder/src/theme/globalBackgrounds.js
var globalBackgrounds_exports = {};
__export(globalBackgrounds_exports, {
  GlobalBackgrounds: () => GlobalBackgrounds,
  bricksBg: () => bricksBg,
  crosshatchBg: () => crosshatchBg,
  defaultBg: () => defaultBg,
  dotsBg: () => dotsBg,
  gridBg: () => gridBg,
  hexagonsBg: () => hexagonsBg,
  mosaicBg: () => mosaicBg,
  stripesBg: () => stripesBg,
  tilesBg: () => tilesBg,
  wavesBg: () => wavesBg
});
function dotsBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    // or any hex
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "dots",
      props: {
        color: "#ffffff",
        // white dots
        opacity: 0.2,
        // subtle
        spacing: 30,
        // pixels between dots
        radius: 2
        // small circle
      }
    }
  };
}
function defaultBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor || "#000000",
    // fallback just in case
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: null
  };
}
function gridBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "grid",
      props: {
        color: "#ffffff",
        // line color
        opacity: 0.15,
        // subtle overlay
        spacing: 40,
        // distance between grid lines
        lineWidth: 1
        // thin lines
      }
    }
  };
}
function stripesBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "stripes",
      props: {
        color: "#ffffff",
        // stripe color
        opacity: 0.05,
        // very subtle
        thickness: 10,
        // height of stripe
        gap: 20
        // vertical gap between stripes
      }
    }
  };
}
function wavesBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "waves",
      props: {
        color: "#ffffff",
        // wave color
        opacity: 0.08,
        // soft appearance
        amplitude: 10,
        // wave height
        frequency: 0.05,
        // wave tightness
        thickness: 2,
        // line thickness
        gap: 50
        // vertical distance between waves
      }
    }
  };
}
function crosshatchBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "crosshatch",
      props: {
        color: "#ffffff",
        opacity: 0.1,
        spacing: 25,
        lineWidth: 1
      }
    }
  };
}
function bricksBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "bricks",
      props: {
        color: "#ffffff",
        opacity: 0.07,
        brickWidth: 60,
        brickHeight: 30,
        gap: 4
      }
    }
  };
}
function mosaicBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "mosaic",
      props: {
        color: "#ffffff",
        opacity: 0.06,
        minSize: 20,
        maxSize: 60,
        count: 100
      }
    }
  };
}
function hexagonsBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "hexagons",
      props: {
        color: "#ffffff",
        opacity: 0.07,
        radius: 30,
        gap: 4
      }
    }
  };
}
function tilesBg(globalTheme) {
  return {
    backgroundColor: globalTheme.backgroundColor,
    backgroundImage: null,
    backgroundImageOpacity: 1,
    pattern: {
      type: "tiles",
      props: {
        color: "#ffffff",
        opacity: 0.05,
        size: 50,
        gap: 5,
        rotate: false
      }
    }
  };
}
var GlobalBackgrounds = {
  defaultBg,
  dotsBg,
  gridBg,
  stripesBg,
  wavesBg,
  crosshatchBg,
  bricksBg,
  tilesBg,
  hexagonsBg,
  mosaicBg
};

// node_modules/taleem-video-deckbuilder/src/items/ItemBuilders.js
var ItemBuilders_exports = {};
__export(ItemBuilders_exports, {
  arc: () => arc,
  circle: () => circle,
  icon: () => icon,
  image: () => image,
  rect: () => rect,
  richText: () => richText,
  table: () => table,
  text: () => text,
  triangle: () => triangle
});
var text = (t = "Demo Text") => createTextItem({ text: t });
var image = (s = "book") => createImageItem({ src: s });
var icon = (name = "BULB") => createIconItem({ iconName: name });
var rect = () => createRectItem();
var circle = () => createCircleItem();
var triangle = () => createTriangleItem();
var richText = (t = "Rich Text") => createRichTextItem({ text: t });
var table = () => createTableItem({
  rows: [
    ["Name", "Age"],
    ["Ali", "17"],
    ["Sara", "16"]
  ]
});
var arc = () => createArcItem();
export {
  DeckBuilder,
  globalBackgrounds_exports as GlobalBackgrounds,
  globalThemes_exports as GlobalThemes,
  ItemBuilders_exports as ItemBuilders,
  defaultItems_exports as defaultItems
};
//# sourceMappingURL=taleem-video-deckbuilder.js.map
